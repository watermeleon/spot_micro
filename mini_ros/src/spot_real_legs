#!/usr/bin/env python3

from __future__ import division
import rospy
import numpy as np
from mini_ros.msg import MiniCmd, JoyButtons, IMUdata, ContactData, AgentData, JointAngles
import copy
import sys
import os
import rospkg
rospack = rospkg.RosPack()

sys.path.append(rospack.get_path('mini_ros') + '/../')

rospy.init_node('motor_controller', anonymous=True)

import servo_controller_fix as servo_controller

controller = servo_controller.Controllers()

class LegsCommander():
    def __init__(self):
        self.sub_cmd = rospy.Subscriber('spot/joints',
                                        JointAngles,
                                        self.set_angles,
                                        queue_size=1)

        # self.ag_pub = rospy.Publisher('spot/agent', AgentData, queue_size=1)
        # self.ja_pub = rospy.Publisher('spot/joints', JointAngles, queue_size=1)
        print("READY TO COMMAND SOME LEGS!")

        self.angles = []
    def set_angles(self, angles):
        # originalz
        leg_angles = [[angles.fls, angles.fle, angles.flw], [angles.frs, angles.fre, angles.frw ]\
            ,[angles.bls, angles.ble, angles.blw], [angles.brs, angles.bre, angles.brw]]

        # leg_angles = [[angles.fls, angles.fle, angles.flw], [angles.bls, angles.ble, angles.blw],\
        #      [angles.frs, angles.fre, angles.frw ], [angles.brs, angles.bre, angles.brw]]
        # print("FLS:", angles.fls, "FRS", angles.frs,"BLS:", angles.bls, "BRS", angles.brs)
        self.angles =  leg_angles

    def move_legs(self):
        # print("leg_data is:",self.angles)
        # leg_angles = [angles.flw, angles.fle, angles.flw, angles.frw, angles.fre, angles.frw \
        #     ,angles.blw, angles.ble, angles.bls, angles.brw, angles.bre, angles.brs]
        if len(self.angles) > 0 :
#            print("now got angles", self.angles)
            # a = 6
            controller.servoRotate(self.angles, rads=False)

        
def main():
    """ The main() function. """
    mini_commander = LegsCommander()
    rate = rospy.Rate(600.0)
    #rate = rospy.Rate(30.0)

    while not rospy.is_shutdown():
        # This is called continuously. Has timeout functionality too
        mini_commander.move_legs()
        rate.sleep()
        # rospy.spin()


if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
